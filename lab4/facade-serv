from flask import Flask, request, jsonify
import requests, uuid, random, socket, hazelcast

web_service = Flask(__name__)

tracker_service_ports = [8881, 8882, 8883]
content_service_ports = [8884, 8885]

cluster_connection = hazelcast.HazelcastClient(cluster_name='hello-world')
work_queue = cluster_connection.get_queue("queue").blocking()
cached_content_responses = []

def check_service_availability(port_num):
    network_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    connection_result = network_socket.connect_ex(('127.0.0.1', port_num))
    network_socket.close()
    return True if connection_result == 0 else False

def select_working_port(port_collection):
    working_ports = port_collection[:]
    while True:
        if len(working_ports) == 0:
            print('no working ports available')
            break
        chosen_port = random.choice(working_ports)
        if not check_service_availability(chosen_port):
            print(chosen_port, 'is unavailable')
            working_ports.remove(chosen_port)
        else: 
            return chosen_port

@web_service.route('/', methods=['POST', 'GET'])
def request_handler():
    
    tracker_port = select_working_port(tracker_service_ports)
    print(f'tracker service port: {tracker_port}')
 
    if request.method == 'POST':
        user_input = request.form.get('txt')
        if not user_input:
            return jsonify('No message'), 400
        
        unique_id = str(uuid.uuid4())
        request_data = {'id': unique_id, 'txt': user_input}
        
        service_call = requests.post(f'http://localhost:{tracker_port}/', data=request_data)
        work_queue.put(user_input)
        
        return jsonify(request_data), 200
    
    elif request.method == 'GET':
        content_port = select_working_port(content_service_ports)
        print(f'content service port: {content_port}')
        
        tracker_result, content_result = requests.get(f'http://localhost:{tracker_port}/'), requests.get(f'http://localhost:{content_port}/')
        
        for entry in content_result.json():
            if entry not in cached_content_responses:
                cached_content_responses.append(entry)
                
        return [f'tracker-service: {tracker_result.json()}'[:-1], f'content-service: {cached_content_responses}'], 200
    
    else:
        return jsonify('Method not allowed'), 405

if __name__ == '__main__':
    web_service.run(port=8880)

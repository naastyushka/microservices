from flask import Flask, request, jsonify
import hazelcast, argparse, os
from isrunning import is_container_running

web_app = Flask(__name__)

cmd_parser = argparse.ArgumentParser()
cmd_parser.add_argument("--port", type=int, required=True)
parsed_args = cmd_parser.parse_args()

docker_services = ['my-first-member', 'my-second-member', 'my-third-member', 'manage-cent']
active_service = None

for service in docker_services[:-1]:
    if not is_container_running(service):
        os.system(f'docker start {service}')
        active_service = service
        break

if not is_container_running(docker_services[-1]):
    os.system(f'docker start {docker_services[-1]}')

cluster_client = hazelcast.HazelcastClient(cluster_name='hello-world')
data_store = cluster_client.get_map('messages').blocking() 

@web_app.route('/', methods=['POST', 'GET'])
def process_request():
    if request.method == 'POST':
        record_id, content = request.form.get('id'), request.form.get('txt')
        if not (record_id or content):
            return jsonify('No id or text'), 400
        
        data_store.put(record_id, content)
        print('Record:', content)
        return jsonify('Record was stored'), 201
    
    elif request.method == 'GET':
        return [data_store.get(k) for k in data_store.key_set()]
    
    else:
        return jsonify('Method not allowed'), 405

web_app.run(port=parsed_args.port)

try:
    while True: 
        pass
except KeyboardInterrupt:
    cluster_client.shutdown()
    if active_service:
        os.system(f'docker stop {active_service}')
